// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum enumRole {
  USER
  ARTIST
}
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role  enumRole     @default(USER)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  playlists Playlist[]
}

model Playlist {
  id        String   @id @default(uuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  songs     Song[]
}

model Song {
  id        String   @id @default(uuid())
  name      String   
  duration  String
  videoUrl  String
  playlistId String?
  playlist  Playlist? @relation(fields: [playlistId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  artist    Artist  @relation(fields: [artistId], references: [id])
  artistId  String
}

model Albuns{
  id        String   @id @default(uuid())
  name      String
  artistId  String
  artist    Artist  @relation(fields: [artistId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Artist {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      enumRole     @default(ARTIST)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  songs     Song[]
  albuns    Albuns[]
}